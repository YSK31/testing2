* {
  margin: 0;
  padding: 0;
}

body {
  width: 100vw;
  height: 100vh;
  display: flex;
  justify-content: center;
  flex-direction: column;
  align-items: center;
  background-color: aliceblue;
  gap : 20px;
}

h1{
  color : white;
  text-shadow: 1px 1px 2px black, 0 0 35px blue, 0 0 15px darkblue;
}

.form-container {
  width : 90%;
  padding: 20px;
  background-color:antiquewhite;
  border-radius: 10px;
}

.form-container form{
  display: flex;
  flex-direction: column;
}

label {
  font-family: Verdana;
}


input[type="text"],
input[type="tel"],
select,
textarea {
  width: 100%;
  box-sizing: border-box;
  padding: 12px 15px;
  margin: 8px 0;
  border: 3px solid #ddd;
  border-radius: 5px;
  transition: 0.5s;
  outline: none;
}

textarea{
  resize: vertical;
  max-width: 100%;
  overflow: auto;
}

input[type=text]{
  width : 100px;
  transition : width 1s ease-in-out;

}

input[type="submit"] {
  width: 100%;
  padding: 10px;
  margin: 10px 0 0 0;
  background-color: rgb(209, 114, 114);
  color: white;
  border-radius: 20px;
  border: none;
  font-size: 15px;
  cursor: pointer;
}

input[type=text]:focus,
input[type=tel]:focus,
select:focus,
textarea:focus{
  border: 3px solid rgb(39, 39, 39);
}

input[type=text]:focus{
  width : 100%;
}

input[type="submit"]:hover {
  background-color: rgb(207, 37, 37);
}

.form-container:hover{
  background-color:rgb(248, 227, 199);
}